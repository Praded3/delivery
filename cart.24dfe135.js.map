{"mappings":"AAAC,IACWA,aAiBRC,MAlBGC,QAAU,GAET,SAASC,oBACLH,aAAe,IAAII,OAAOC,KAAKC,OAAOC,aAClCC,SAASC,eAAe,aAExB,CACIC,MAAO,CAAC,WACRC,sBAAuB,CAAEC,QAAS,CAAC,UAO9BC,YAAY,gBAAiBC,c,CAKtD,SAASA,gBACPb,MAAQD,aAAae,WAIrBC,QAAQC,IAAIhB,OACZe,QAAQC,IAAIhB,MAAMiB,oBAEpBC,aAAalB,M,CAQX,IAAMkB,aAAe,SAACC,GAGhB,GADMJ,QAAQC,IAAIf,UACbmB,MAAMC,QAAQF,EAAMF,oBACrB,MAAMK,MAAM,sCAEhB,IAAKH,EAAMF,mBAAmBM,OAC1B,MAAMD,MAAM,+BAEhB,IAGME,EAAe,SAACC,GAClB,OAAOA,EAAUhB,MAAMiB,SAAS,Q,EAElCC,EAAS,SAACF,GACZ,SAAIA,EAAUhB,MAAMiB,SAAS,aAAeD,EAAUhB,MAAMiB,SAAS,gBACjED,EAAUhB,MAAMiB,SAAS,oCAElBD,EAAUhB,MAAMiB,SAAS,kBAAmBD,EAAUhB,MAAMiB,SAAS,gBAC5EzB,QAAQ2B,oBAAsB,gBAAuB,E,EAGvDC,EAAU,SAACJ,GACb,OAAOA,EAAUhB,MAAMiB,SAAS,8B,EAE9BI,EAAY,SAACL,GACf,OAAOA,EAAUhB,MAAMiB,SAAS,U,EAE9BK,EAAW,SAACN,GACd,OAAOA,EAAUhB,MAAMiB,SAAS,8B,EAE9BM,EAAe,SAACP,GAClB,OAAOA,EAAUhB,MAAMiB,SAAS,c,EAO/BO,GAAsB,EAAtBC,GAAsB,EAAtBC,OAAsBC,E,IAA3B,QAAKC,EAAAC,EAA0BnB,EAAMF,mBAAkBsB,OAAAC,cAAlDP,GAAAI,EAAAC,EAAsBG,QAAAC,MAAtBT,GAAsB,EAA8B,CAApD,IACKU,EADLN,EAAsBO,MAEJD,EAhCElC,MAAMiB,SAAS,mBAiChCzB,QAAQ4C,cAAgBF,EAAUG,WAElCtB,EAAamB,KACb1C,QAAQ8C,YAAcJ,EAAUG,YAEhCnB,EAAOgB,IAAgB1C,QAAQ+C,MAAwC,iBAAhC/C,QAAQ2B,sBAC/C3B,QAAQ+C,KAAOL,EAAUG,WAEzBhB,EAAUa,KACV1C,QAAQU,QAAUgC,EAAUG,WAE5Bf,EAASY,KACT1C,QAAQgD,OAASN,EAAUG,WAE3BjB,EAAQc,KACR1C,QAAQiD,MAAQP,EAAUG,WAE1Bd,EAAaW,KACb1C,QAAQkD,YAAcR,EAAUG,U,WArBnCZ,GAAsB,EAAtBC,EAAsBiB,C,aAAtBnB,GAAsB,MAAtBK,EAAsBe,QAAtBf,EAAsBe,Q,YAAtBnB,E,MAAAC,C,EAuCJ,OAfGhB,EAAMV,MAAMiB,SAAS,YACrBzB,QAAQqD,KAAO,OACRnC,EAAMV,MAAMiB,SAAS,+BAC5BzB,QAAQqD,KAAO,QACRnC,EAAMV,MAAMiB,SAAS,mBAAqBP,EAAMV,MAAMiB,SAAS,UAAYP,EAAMV,MAAMiB,SAAS,WACvGzB,QAAQqD,KAAO,iBACRnC,EAAMV,MAAMiB,SAAS,YAC5BzB,QAAQqD,KAAO,UAEfrD,QAAQqD,KAAO,KAEnBrD,QAAQsD,kBAAoBpC,EAAMoC,kBAChCxC,QAAQC,IAAIf,SAGNA,O","sources":["src/map.js"],"sourcesContent":[" const address = {};\n        let autocomplete;\n        function initAutocomplete() {\n            autocomplete = new google.maps.places.Autocomplete(\n                document.getElementById('pac-input'),\n\n                {\n                    types: ['address'],\n                    componentRestrictions: { country: [\"us\"] },\n                    // fields: [\"address_components\"],\n                    // fields: [\"address\"],\n                    // fields: ['place_id', 'geometry', 'name'],\n                });\n\n\n            autocomplete.addListener('place_changed', onPlaceChange);\n        }\n\nlet place;\n\nfunction onPlaceChange() {\n  place = autocomplete.getPlace();\n\n \n  //     alert(place.name);\n  console.log(place);\n  console.log(place.address_components);\n\nparseAddress(place);\n \n\n  \n\n}\n\n\n  const parseAddress = (place) => {\n        // const address = {};\n              console.log(address);\n        if (!Array.isArray(place.address_components)) {\n            throw Error('Address Components is not an array')\n        }\n        if (!place.address_components.length) {\n            throw Error('Address Components is empty')\n        }\n        const isStreetNumber = (component) => {\n            return component.types.includes('street_number')\n        }\n        const isStreetName = (component) => {\n            return component.types.includes('route')\n        }\n    const isCity = (component) => {\n        if (component.types.includes('locality') || component.types.includes('sublocality') ||\n            component.types.includes('administrative_area_level_3')) {\n            return !0\n        } else if (component.types.includes('neighborhood') && component.types.includes('political')) {\n            address.prev_city_component = 'neighborhood'; return !0\n        } else { return !1 }\n    }\n    const isState = (component) => {\n        return component.types.includes('administrative_area_level_1')\n    }\n    const isCountry = (component) => {\n        return component.types.includes('country')\n    }\n    const isCounty = (component) => {\n        return component.types.includes('administrative_area_level_2')\n    }\n    const isPostalCode = (component) => {\n        return component.types.includes('postal_code')\n    }\n    const isStreetAddress = (component) => {\n        return component.types.includes('street_address')\n        }\n        \n\n    for (const addressComponent of place.address_components) {\n        const component = addressComponent;\n        if (isStreetNumber(component)) {\n            address.street_number = component.long_name\n        }\n        if (isStreetName(component)) {\n            address.street_name = component.long_name\n        }\n        if (isCity(component) && (!address.city || address.prev_city_component === 'neighborhood')) {\n            address.city = component.long_name\n        }\n        if (isCountry(component)) {\n            address.country = component.long_name\n        }\n        if (isCounty(component)) {\n            address.county = component.long_name\n        }\n        if (isState(component)) {\n            address.state = component.long_name\n        }\n        if (isPostalCode(component)) {\n            address.postal_code = component.long_name\n        }\n    }\n    if (place.types.includes('locality')) {\n        address.type = 'city'\n    } else if (place.types.includes('administrative_area_level_1')) {\n        address.type = 'state'\n    } else if (place.types.includes('street_address') || place.types.includes('route') || place.types.includes('premise')) {\n        address.type = 'street_address'\n    } else if (place.types.includes('lcountry')) {\n        address.type = 'country'\n    } else {\n        address.type = null\n    }\n    address.formatted_address = place.formatted_address;\n      console.log(address);\n      \t\n    //  document.getElementById('bbbbb').innerHTML = address.formatted_address;\n     return address\n\n     \n}"],"names":["autocomplete","place","address","initAutocomplete","google","maps","places","Autocomplete","document","getElementById","types","componentRestrictions","country","addListener","onPlaceChange","getPlace","console","log","address_components","parseAddress","place1","Array","isArray","Error","length","isStreetName","component","includes","isCity","prev_city_component","isState","isCountry","isCounty","isPostalCode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","component1","value","street_number","long_name","street_name","city","county","state","postal_code","err","return","type","formatted_address"],"version":3,"file":"cart.24dfe135.js.map"}